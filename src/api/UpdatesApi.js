/**
 * YouLend Third Party Onboarding API
 * Through this API you can can initiate the process of onboarding a borrower with YouLend
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LeadStateModel from '../model/LeadStateModel';
import ProblemDetails from '../model/ProblemDetails';

/**
* Updates service.
* @module api/UpdatesApi
* @version 1.0
*/
export default class UpdatesApi {

    /**
    * Constructs a new UpdatesApi. 
    * @alias module:api/UpdatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Method for getting the state of all leads for a lending partner
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LeadStateModel>} and HTTP response
     */
    updatesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [LeadStateModel];
      return this.apiClient.callApi(
        '/Updates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Method for getting the state of all leads for a lending partner
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LeadStateModel>}
     */
    updatesGet(opts) {
      return this.updatesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Method for getting updates on a submitted lead
     * @param {String} leadId The lead id
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LeadStateModel} and HTTP response
     */
    updatesLeadIdGetWithHttpInfo(leadId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leadId' is set
      if (leadId === undefined || leadId === null) {
        throw new Error("Missing the required parameter 'leadId' when calling updatesLeadIdGet");
      }

      let pathParams = {
        'leadId': leadId
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = LeadStateModel;
      return this.apiClient.callApi(
        '/Updates/{leadId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Method for getting updates on a submitted lead
     * @param {String} leadId The lead id
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LeadStateModel}
     */
    updatesLeadIdGet(leadId, opts) {
      return this.updatesLeadIdGetWithHttpInfo(leadId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
